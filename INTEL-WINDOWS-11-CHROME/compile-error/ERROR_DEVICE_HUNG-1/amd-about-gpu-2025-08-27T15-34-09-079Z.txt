Graphics Feature Status
=======================
*   Canvas: Hardware accelerated
*   Direct Rendering Display Compositor: Disabled
*   Compositing: Hardware accelerated
*   Multiple Raster Threads: Enabled
*   OpenGL: Enabled
*   Rasterization: Hardware accelerated
*   Raw Draw: Disabled
*   Skia Graphite: Disabled
*   TreesInViz: Disabled
*   Video Decode: Hardware accelerated
*   Video Encode: Hardware accelerated
*   Vulkan: Disabled
*   WebGL: Hardware accelerated
*   WebGL2: Hardware accelerated
*   WebGPU: Hardware accelerated
*   WebNN: Disabled

Version Information
===================
Data exported              : 2025-08-27T15:34:06.007Z
Chrome version             : Chrome/139.0.7258.155
Operating system           : Windows NT 10.0.26100.4946 (kernel32 10.0.26100.4768)
Software rendering list URL: https://chromium.googlesource.com/chromium/src/+/206d8aac017ed2a506c9ee9389c39d5d97663c9d/gpu/config/software_rendering_list.json
Driver bug list URL        : https://chromium.googlesource.com/chromium/src/+/206d8aac017ed2a506c9ee9389c39d5d97663c9d/gpu/config/gpu_driver_bug_list.json
ANGLE commit id            : d9fc4a372074
2D graphics backend        : Skia/139 4abe0638e35d34b6fdb70f1f5ce0f0e1879a021e
Command Line               : "C:\Program Files\Google\Chrome\Application\chrome.exe" --restart --restart --flag-switches-begin --flag-switches-end

Driver Information
==================
Initialization time             : 77
In-process GPU                  : false
Skia Backend                    : GaneshGL
Passthrough Command Decoder     : true
Sandboxed                       : true
GPU0                            : VENDOR= 0x1002, DEVICE=0x15e7 [AMD Radeon (TM) Graphics], SUBSYS=0x1ec21043, REV=193, LUID={0,59379}, DRIVER_VENDOR=AMD, DRIVER_VERSION=31.0.21923.11000 *ACTIVE*
GPU1                            : VENDOR= 0x1414, DEVICE=0x008c [Microsoft Basic Render Driver], LUID={0,62763}, DRIVER_VERSION=10.0.26100.4768
Optimus                         : false
AMD switchable                  : false
Desktop compositing             : Aero Glass
Direct composition              : true
Supports overlays               : true
YUY2 overlay support            : SOFTWARE
NV12 overlay support            : SCALING
BGRA8 overlay support           : SOFTWARE
RGB10A2 overlay support         : SCALING
P010 overlay support            : SCALING
DirectML feature level          : 5.0
Driver D3D12 feature level      : D3D 12.1
Driver Vulkan API version       : Vulkan API 1.3.0
Pixel shader version            : 5.0
Vertex shader version           : 5.0
Max. MSAA samples               : 8
Machine model name              : 
Machine model version           : 
GL implementation parts         : (gl=egl-angle,angle=d3d11)
Display type                    : ANGLE_D3D11
GL_VENDOR                       : Google Inc. (AMD)
GL_RENDERER                     : ANGLE (AMD, AMD Radeon (TM) Graphics (0x000015E7) Direct3D11 vs_5_0 ps_5_0, D3D11-31.0.21923.11000)
GL_VERSION                      : OpenGL ES 2.0.0 (ANGLE 2.1.25657 git hash: d9fc4a372074)
GL_EXTENSIONS                   : GL_AMD_performance_monitor GL_ANGLE_base_vertex_base_instance_shader_builtin GL_ANGLE_blob_cache GL_ANGLE_client_arrays GL_ANGLE_depth_texture GL_ANGLE_framebuffer_blit GL_ANGLE_framebuffer_multisample GL_ANGLE_get_serialized_context_string GL_ANGLE_get_tex_level_parameter GL_ANGLE_instanced_arrays GL_ANGLE_lossy_etc_decode GL_ANGLE_memory_size GL_ANGLE_pack_reverse_row_order GL_ANGLE_polygon_mode GL_ANGLE_program_binary_readiness_query GL_ANGLE_program_cache_control GL_ANGLE_provoking_vertex GL_ANGLE_request_extension GL_ANGLE_robust_client_memory GL_ANGLE_texture_compression_dxt3 GL_ANGLE_texture_compression_dxt5 GL_ANGLE_texture_usage GL_ANGLE_translated_shader_source GL_APPLE_clip_distance GL_ARM_rgba8 GL_CHROMIUM_bind_generates_resource GL_CHROMIUM_bind_uniform_location GL_CHROMIUM_color_buffer_float_rgb GL_CHROMIUM_color_buffer_float_rgba GL_CHROMIUM_copy_compressed_texture GL_CHROMIUM_copy_texture GL_CHROMIUM_lose_context GL_EXT_EGL_image_external_wrap_modes GL_EXT_base_instance GL_EXT_blend_func_extended GL_EXT_blend_minmax GL_EXT_clip_control GL_EXT_color_buffer_half_float GL_EXT_debug_label GL_EXT_debug_marker GL_EXT_depth_clamp GL_EXT_discard_framebuffer GL_EXT_disjoint_timer_query GL_EXT_draw_buffers GL_EXT_draw_elements_base_vertex GL_EXT_float_blend GL_EXT_frag_depth GL_EXT_instanced_arrays GL_EXT_map_buffer_range GL_EXT_multisampled_render_to_texture GL_EXT_occlusion_query_boolean GL_EXT_polygon_offset_clamp GL_EXT_read_format_bgra GL_EXT_robustness GL_EXT_sRGB GL_EXT_shader_texture_lod GL_EXT_texture_border_clamp GL_EXT_texture_compression_bptc GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_rgtc GL_EXT_texture_compression_s3tc_srgb GL_EXT_texture_filter_anisotropic GL_EXT_texture_format_BGRA8888 GL_EXT_texture_mirror_clamp_to_edge GL_EXT_texture_norm16 GL_EXT_texture_rg GL_EXT_texture_storage GL_EXT_texture_type_2_10_10_10_REV GL_EXT_unpack_subimage GL_KHR_debug GL_KHR_parallel_shader_compile GL_KHR_robustness GL_NV_EGL_stream_consumer_external GL_NV_fence GL_NV_framebuffer_blit GL_NV_pack_subimage GL_NV_pixel_buffer_object GL_OES_EGL_image GL_OES_EGL_image_external GL_OES_compressed_EAC_R11_signed_texture GL_OES_compressed_EAC_R11_unsigned_texture GL_OES_compressed_EAC_RG11_signed_texture GL_OES_compressed_EAC_RG11_unsigned_texture GL_OES_compressed_ETC2_RGB8_texture GL_OES_compressed_ETC2_RGBA8_texture GL_OES_compressed_ETC2_punchthroughA_RGBA8_texture GL_OES_compressed_ETC2_punchthroughA_sRGB8_alpha_texture GL_OES_compressed_ETC2_sRGB8_alpha8_texture GL_OES_compressed_ETC2_sRGB8_texture GL_OES_depth24 GL_OES_depth32 GL_OES_draw_elements_base_vertex GL_OES_element_index_uint GL_OES_fbo_render_mipmap GL_OES_get_program_binary GL_OES_mapbuffer GL_OES_packed_depth_stencil GL_OES_required_internalformat GL_OES_rgb8_rgba8 GL_OES_standard_derivatives GL_OES_surfaceless_context GL_OES_texture_border_clamp GL_OES_texture_float GL_OES_texture_float_linear GL_OES_texture_half_float GL_OES_texture_half_float_linear GL_OES_texture_npot GL_OES_vertex_array_object GL_WEBGL_video_texture
Disabled Extensions             : GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent
Disabled WebGL Extensions       : 
Window system binding vendor    : Google Inc. (AMD)
Window system binding version   : 1.5 (ANGLE 2.1.25657 git hash: d9fc4a372074)
Window system binding extensions: EGL_EXT_create_context_robustness EGL_ANGLE_d3d_share_handle_client_buffer EGL_ANGLE_d3d_texture_client_buffer EGL_ANGLE_surface_d3d_texture_2d_share_handle EGL_ANGLE_query_surface_pointer EGL_ANGLE_window_fixed_size EGL_ANGLE_keyed_mutex EGL_ANGLE_surface_orientation EGL_ANGLE_direct_composition EGL_NV_post_sub_buffer EGL_KHR_create_context EGL_KHR_image EGL_KHR_image_base EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_gl_renderbuffer_image EGL_KHR_get_all_proc_addresses EGL_KHR_stream EGL_KHR_stream_consumer_gltexture EGL_NV_stream_consumer_gltexture_yuv EGL_ANGLE_stream_producer_d3d_texture EGL_ANGLE_create_context_webgl_compatibility EGL_CHROMIUM_create_context_bind_generates_resource EGL_CHROMIUM_sync_control EGL_EXT_pixel_format_float EGL_KHR_surfaceless_context EGL_ANGLE_display_texture_share_group EGL_ANGLE_display_semaphore_share_group EGL_ANGLE_create_context_client_arrays EGL_ANGLE_program_cache_control EGL_ANGLE_robust_resource_initialization EGL_ANGLE_create_context_extensions_enabled EGL_ANDROID_blob_cache EGL_ANDROID_recordable EGL_ANGLE_image_d3d11_texture EGL_ANGLE_create_context_backwards_compatible EGL_KHR_no_config_context EGL_KHR_create_context_no_error EGL_KHR_reusable_sync EGL_ANGLE_memory_usage_report
Direct rendering version        : unknown
Reset notification strategy     : 0x8252
GPU process crash count         : 0
gfx::BufferFormats supported for allocation and texturing: R_8: not supported,  R_16: not supported,  RG_88: not supported,  RG_1616: not supported,  BGR_565: not supported,  RGBA_4444: not supported,  RGBX_8888: not supported,  RGBA_8888: not supported,  BGRX_8888: not supported,  BGRA_1010102: not supported,  RGBA_1010102: not supported,  BGRA_8888: not supported,  RGBA_F16: not supported,  YVU_420: not supported,  YUV_420_BIPLANAR: not supported,  YUVA_420_TRIPLANAR: not supported,  P010: not supported

Driver Bug Workarounds
======================
*   disable_d3d11_vp9_ksvc_decoding
*   disable_direct_composition_sw_video_overlays
*   disable_h264_accelerator_sw_brc
*   disable_nv12_dynamic_textures
*   disable_video_overlay_if_moving
*   disable_vp_auto_hdr
*   disable_vp_super_resolution
*   disable_webnn_for_npu
*   enable_webgl_timer_query_extensions
*   exit_on_context_lost
*   force_rgb10a2_overlay_support
*   limit_d3d11_video_decoder_to_11_0
*   disabled_extension_GL_KHR_blend_equation_advanced
*   disabled_extension_GL_KHR_blend_equation_advanced_coherent

Problems Detected
=================
*   Some drivers are unable to reset the D3D device in the GPU process sandbox
    Applied Workarounds: exit_on_context_lost

*   Disable KHR_blend_equation_advanced until cc shaders are updated:
    (http://crbug.com/661715)
    Applied Workarounds: disable(GL_KHR_blend_equation_advanced),
        disable(GL_KHR_blend_equation_advanced_coherent)

*   Expose WebGL's disjoint_timer_query extensions on platforms with site isolation:
    (http://crbug.com/808744), (http://crbug.com/870491)
    Applied Workarounds: enable_webgl_timer_query_extensions

*   dynamic textures fail to work on AMD GPUs:
    (http://crbug.com/1029855), (http://crbug.com/1050666)
    Applied Workarounds: disable_nv12_dynamic_textures

*   Limit D3D11VideoDecoder to 11.0 due to crashes on AMD:
    (http://crbug.com/1012464)
    Applied Workarounds: limit_d3d11_video_decoder_to_11_0

*   Software overlays fail to work reliably on AMD devices:
    (http://crbug.com/1161215), (http://crbug.com/1160217)
    Applied Workarounds: disable_direct_composition_sw_video_overlays

*   Only enable video processor super resolution on Intel Gen10+ GPUs and NVIDIA GPUs with 530+ drivers:
    (http://crbug.com/1318380)
    Applied Workarounds: disable_vp_super_resolution

*   Only enable video processor auto HDR on NVIDIA GPUs with 550.50+ driver:
    (http://crbug.com/1445741)
    Applied Workarounds: disable_vp_auto_hdr

*   Disable VP9 k-SVC video decoding on non-Intel GPUs:
    (http://crbug.com/1508379)
    Applied Workarounds: disable_d3d11_vp9_ksvc_decoding

*   Block all NPU drivers except Intel driver versions >= 32.0.100.3053 for WebNN:
    (http://crbug.com/341327464)
    Applied Workarounds: disable_webnn_for_npu

*   Disable overlay promotion for clear video quads when their MPO quads would move:
    (http://crbug.com/40677119)
    Applied Workarounds: disable_video_overlay_if_moving

*   Forcing RGB10A2 overlay due to MSFT bug, this enables HDR to take overlay path for AMD:
    (http://crbug.com/394610795)
    Applied Workarounds: force_rgb10a2_overlay_support

*   Disable software bitrate control for H.264 encoding on AMD GPUs on Windows.:
    (http://crbug.com/417752242)
    Applied Workarounds: disable_h264_accelerator_sw_brc

ANGLE Features
==============
*   allowCompressedFormats (Frontend workarounds): Enabled

*   alwaysEnableEmulatedMultidrawExtensions (Frontend workarounds): Disabled

*   alwaysRunLinkSubJobsThreaded (Frontend features): Disabled

*   cacheCompiledShader (Frontend features): Disabled

*   compileJobIsThreadSafe (Frontend features): Enabled

*   disableAnisotropicFiltering (Frontend workarounds): Disabled

*   disableProgramBinary (Frontend features): Disabled

*   disableProgramCaching (Frontend features): Disabled

*   disableProgramCachingForTransformFeedback (Frontend workarounds): Disabled

*   dumpShaderSource (Frontend features): Disabled

*   dumpTranslatedShaders (Frontend features): Disabled

*   emulatePixelLocalStorage (Frontend features): Enabled

*   enableCaptureLimits (Frontend features): Disabled

*   enableProgramBinaryForCapture (Frontend features): Disabled

*   enableShaderSubstitution (Frontend workarounds): Disabled

*   enableTranslatedShaderSubstitution (Frontend workarounds): Disabled

*   forceDepthAttachmentInitOnClear (Frontend workarounds): Enabled

*   forceFlushAfterDrawcallUsingShadowmap (Frontend workarounds): Disabled

*   forceGlErrorChecking (Frontend features): Disabled

*   forceInitShaderVariables (Frontend features): Disabled

*   forceMinimumMaxVertexAttributes (Frontend features): Disabled

*   forceRobustResourceInit (Frontend features): Disabled

*   linkJobIsThreadSafe (Frontend features): Enabled

*   loseContextOnOutOfMemory (Frontend workarounds): Enabled

*   rejectWebglShadersWithUndefinedBehavior (Frontend workarounds): Enabled

*   singleThreadedTextureDecompression (Frontend workarounds): Disabled

*   uncurrentEglSurfaceUponSurfaceDestroy (Frontend workarounds): Disabled

*   addMockTextureNoRenderTarget (D3D workarounds): Disabled

*   allowClearForRobustResourceInit (D3D workarounds): Enabled

*   allowES3OnFL100 (D3D workarounds): Disabled

*   allowTranslateUniformBlockToStructuredBuffer (D3D workarounds): Enabled

*   borderColorSrgb (D3D workarounds): Disabled

*   callClearTwice (D3D workarounds): Disabled

*   depthStencilBlitExtraCopy (D3D workarounds): Disabled

*   disableB5G6R5Support (D3D workarounds): Enabled

*   disableRasterizerOrderViews (D3D workarounds): Disabled

*   emulateIsnanFloat (D3D workarounds): Disabled

*   emulateTinyStencilTextures (D3D workarounds): Enabled

*   enableTimestampQueries (D3D workarounds): Disabled

*   expandIntegerPowExpressions (D3D workarounds): Enabled

*   flushAfterEndingTransformFeedback (D3D workarounds): Disabled

*   forceAtomicValueResolution (D3D workarounds): Disabled

*   getDimensionsIgnoresBaseLevel (D3D workarounds): Disabled

*   mrtPerfWorkaround (D3D workarounds): Enabled

*   preAddTexelFetchOffsets (D3D workarounds): Disabled

*   rewriteUnaryMinusOperator (D3D workarounds): Disabled

*   selectViewInGeometryShader (D3D workarounds): Disabled

*   setDataFasterThanImageUpload (D3D workarounds): Enabled

*   skipVSConstantRegisterZero (D3D workarounds): Disabled

*   supportsNonConstantLoopIndexing (D3D workarounds): Enabled

*   useSystemMemoryForConstantBuffers (D3D workarounds): Disabled

*   zeroMaxLodWorkaround (D3D workarounds): Disabled

Dawn Info
=========

<Unknown GPU>  OpenGLES backend - ANGLE (AMD, AMD Radeon (TM) Graphics (0x000015E7) Direct3D11 vs_5_0 ps_5_0, D3D11-31.0.21923.11000) (Compatibility Mode)
----------------------------------------------------------------------------------------------------------------------------------------------------------

[WebGPU Status]
---------------
*   Available

[Adapter Supported Features]
----------------------------
*   texture-compression-bc
*   texture-compression-etc2
*   float32blendable
*   dual-source-blending
*   dawn-internal-usages
*   dawn-native
*   implicit-device-synchronization
*   angle-texture-sharing
*   unorm16texture-formats
*   snorm16texture-formats
*   dawn-format-capabilities
*   norm16texture-formats

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   disable_indexed_draw_buffers: 
    (https://crbug.com/dawn/582):
    Disables the use of indexed draw buffer state which is unsupported on some
    platforms.

*   flush_before_client_wait_sync: 
    (https://crbug.com/dawn/633):
    Call glFlush before glClientWaitSync to work around bugs in the latter

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   use_placeholder_fragment_in_vertex_only_pipeline: 
    (https://crbug.com/dawn/136):
    Use a placeholder empty fragment shader in vertex only render pipeline.
    This toggle must be enabled for OpenGL ES backend, the Vulkan Backend, and
    serves as a workaround by default enabled on some Metal devices with Intel
    GPU to ensure the depth result is correct.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   use_blit_for_buffer_to_stencil_texture_copy: 
    (https://crbug.com/dawn/1389):
    Use a blit instead of a copy command to copy buffer data to the stencil
    aspect of a texture. Works around an issue where stencil writes by copy
    commands are not visible to a render or compute pass.

*   use_blit_for_depth16unorm_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1782):
    Use a blit instead of a copy command to copy depth aspect of a texture to
    a buffer.Workaround for OpenGL and OpenGLES.

*   use_blit_for_depth32float_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1782):
    Use a blit instead of a copy command to copy depth aspect of a texture to
    a buffer.Workaround for OpenGLES.

*   use_blit_for_stencil_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1782):
    Use a blit instead of a copy command to copy stencil aspect of a texture
    to a buffer.Workaround for OpenGLES.

*   use_blit_for_snorm_texture_to_buffer_copy: 
    (https://crbug.com/dawn/1781):
    Use a blit instead of a copy command to copy snorm texture to a
    buffer.Workaround for OpenGLES.

*   use_blit_for_rgb9e5ufloat_texture_copy: 
    (https://crbug.com/dawn/2079):
    Use a blit instead of a copy command to copy rgb9e5ufloat texture to a
    texture or a buffer.Workaround for OpenGLES.

*   use_t2b2t_for_srgb_texture_copy: 
    (https://crbug.com/dawn/2362):
    Use T2B and B2T copies to emulate a T2T copy between sRGB and non-sRGB
    textures.Workaround for OpenGLES.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<Integrated GPU>  D3D12 backend - AMD Radeon (TM) Graphics
----------------------------------------------------------

[WebGPU Status]
---------------
*   Available

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   texture-compression-bc-sliced-3d
*   indirect-first-instance
*   shader-f16
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_d3d12_resource_heap_tier2: 
    (https://crbug.com/dawn/27):
    Enable support for resource heap tier 2. Resource heap tier 2 allows
    mixing of texture and buffers in the same heap. This allows better heap
    re-use and reduces fragmentation.

*   use_d3d12_render_pass: 
    (https://crbug.com/dawn/36):
    Use the D3D12 render pass API introduced in Windows build 1809 by default.
    On versions of Windows prior to build 1809, or when this toggle is turned
    off, Dawn will emulate a render pass.

*   use_d3d12_residency_management: 
    (https://crbug.com/dawn/193):
    Enable residency management. This allows page-in and page-out of resource
    heaps in GPU memory. This component improves overcommitted performance by
    keeping the most recently used resources local to the GPU. Turning this
    component off can cause allocation failures when application memory
    exceeds physical device memory.

*   use_dxc: 
    (https://crbug.com/dawn/402):
    Use DXC instead of FXC for compiling HLSL when both dxcompiler.dll and
    dxil.dll is available.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   disable_sub_allocation_for_2d_texture_with_copy_dst_or_render_attachment: 
    (https://crbug.com/1237175):
    Disable resource sub-allocation for the 2D texture with CopyDst or
    RenderAttachment usage. Due to driver issues, this toggle is enabled by
    default on D3D12 backends using Intel Gen9.5 or Gen11 GPUs, on Vulkan
    backends using Intel Gen12 GPUs, and D3D12 backends using AMD GPUs.

*   d3d12_use_root_signature_version_1_1: 
    (https://crbug.com/tint/1890):
    Use D3D12 Root Signature Version 1.1 to make additional guarantees about
    the descriptors in a descriptor heap and the data pointed to by the
    descriptors so that the drivers can make better optimizations on them.

*   d3d12_use_64kb_alignment_msaa_texture: 
    (https://crbug.com/dawn/282):
    Create MSAA textures with 64KB
    (D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT) alignment.

*   d3d12_create_not_zeroed_heap: 
    (https://crbug.com/dawn/484):
    Create D3D12 heap with D3D12_HEAP_FLAG_CREATE_NOT_ZEROED when it is
    supported. It is safe because in Dawn we always clear the resources
    manually when needed.

*   d3d12_relax_buffer_texture_copy_pitch_and_offset_alignment: 
    (https://crbug.com/381000081):
    Don't require the alignments of D3D12_TEXTURE_DATA_PITCH_ALIGNMENT (256)
    for row pitch and D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT (512) for offset
    in buffer-texture copies.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<Integrated GPU>  Vulkan backend - AMD Radeon (TM) Graphics
-----------------------------------------------------------

[WebGPU Status]
---------------
*   Available

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   texture-compression-bc-sliced-3d
*   indirect-first-instance
*   shader-f16
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-native
*   implicit-device-synchronization
*   transient-attachments
*   unorm16texture-formats
*   snorm16texture-formats
*   adapter-properties-memory-heaps
*   adapter-properties-vk
*   dawn-format-capabilities
*   norm16texture-formats
*   dawn-load-resolve-texture
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_temporary_buffer_in_texture_to_texture_copy: 
    (https://crbug.com/dawn/42):
    Split texture-to-texture copy into two copies: copy from source texture
    into a temporary buffer, and copy from the temporary buffer into the
    destination texture when copying between compressed textures that don't
    have block-aligned sizes. This workaround is enabled by default on all
    Vulkan drivers to solve an issue in the Vulkan SPEC about the
    texture-to-texture copies with compressed formats. See #1005
    (https://github.com/KhronosGroup/Vulkan-Docs/issues/1005) for more
    details.

*   vulkan_use_d32s8: 
    (https://crbug.com/dawn/286):
    Vulkan mandates support of either D32_FLOAT_S8 or D24_UNORM_S8. When
    available the backend will use D32S8 (toggle to on) but setting the toggle
    to off will make it use the D24S8 format when possible.

*   vulkan_use_s8: 
    (https://crbug.com/dawn/666):
    Vulkan has a pure stencil8 format but it is not universally available.
    When this toggle is on, the backend will use S8 for the stencil8 format,
    otherwise it will fallback to D32S8 or D24S8.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   vulkan_use_demote_to_helper_invocation_extension: 
    (https://crbug.com/42250787):
    Sets the use of the vulkan demote to helper extension

*   use_placeholder_fragment_in_vertex_only_pipeline: 
    (https://crbug.com/dawn/136):
    Use a placeholder empty fragment shader in vertex only render pipeline.
    This toggle must be enabled for OpenGL ES backend, the Vulkan Backend, and
    serves as a workaround by default enabled on some Metal devices with Intel
    GPU to ensure the depth result is correct.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   use_vulkan_zero_initialize_workgroup_memory_extension: 
    (https://crbug.com/dawn/1302):
    Initialize workgroup memory with OpConstantNull on Vulkan when the Vulkan
    extension VK_KHR_zero_initialize_workgroup_memory is supported.

*   vulkan_use_image_robust_access_2: 
    (https://crbug.com/tint/1890):
    Disable Tint robustness transform on textures when VK_EXT_robustness2 is
    supported and robustImageAccess2 == VK_TRUE.

*   vulkan_use_buffer_robust_access_2: 
    (https://crbug.com/tint/1890):
    Disable index clamping on the runtime-sized arrays on buffers in Tint
    robustness transform when VK_EXT_robustness2 is supported and
    robustBufferAccess2 == VK_TRUE.

*   vulkan_use_storage_input_output_16: 
    (https://crbug.com/tint/2161):
    Use the StorageInputOutput16 SPIR-V capability for f16 shader IO types
    when the device supports it.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<Integrated GPU>  D3D11 backend - AMD Radeon (TM) Graphics
----------------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/41479539: D3D11 backend not fully implemented. |

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   texture-compression-bc
*   texture-compression-bc-sliced-3d
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   d3d11multithread-protected
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-format-p010
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-texture-memory-d3d11texture-2d
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   dawn-load-resolve-texture
*   dawn-partial-load-resolve-texture
*   dawn-texel-copy-buffer-row-alignment
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   use_blit_for_buffer_to_stencil_texture_copy: 
    (https://crbug.com/dawn/1389):
    Use a blit instead of a copy command to copy buffer data to the stencil
    aspect of a texture. Works around an issue where stencil writes by copy
    commands are not visible to a render or compute pass.

*   use_blit_for_t2b: 
    (https://crbug.com/dawn/348654098):
    Use a compute based blit instead of a copy command to copy texture with
    supported format to a buffer.

*   use_blit_for_b2t: 
    (https://crbug.com/dawn/348653642):
    Use a shader based blit instead of a copy command to copy a buffer to a
    texture with supported format.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<CPU>  D3D12 backend - Microsoft Basic Render Driver
----------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/40057808: CPU adapters not fully tested or conformant. |

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   texture-compression-bc-sliced-3d
*   indirect-first-instance
*   shader-f16
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_d3d12_resource_heap_tier2: 
    (https://crbug.com/dawn/27):
    Enable support for resource heap tier 2. Resource heap tier 2 allows
    mixing of texture and buffers in the same heap. This allows better heap
    re-use and reduces fragmentation.

*   use_d3d12_render_pass: 
    (https://crbug.com/dawn/36):
    Use the D3D12 render pass API introduced in Windows build 1809 by default.
    On versions of Windows prior to build 1809, or when this toggle is turned
    off, Dawn will emulate a render pass.

*   use_d3d12_residency_management: 
    (https://crbug.com/dawn/193):
    Enable residency management. This allows page-in and page-out of resource
    heaps in GPU memory. This component improves overcommitted performance by
    keeping the most recently used resources local to the GPU. Turning this
    component off can cause allocation failures when application memory
    exceeds physical device memory.

*   use_dxc: 
    (https://crbug.com/dawn/402):
    Use DXC instead of FXC for compiling HLSL when both dxcompiler.dll and
    dxil.dll is available.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   d3d12_use_64kb_alignment_msaa_texture: 
    (https://crbug.com/dawn/282):
    Create MSAA textures with 64KB
    (D3D12_SMALL_MSAA_RESOURCE_PLACEMENT_ALIGNMENT) alignment.

*   d3d12_create_not_zeroed_heap: 
    (https://crbug.com/dawn/484):
    Create D3D12 heap with D3D12_HEAP_FLAG_CREATE_NOT_ZEROED when it is
    supported. It is safe because in Dawn we always clear the resources
    manually when needed.

*   d3d12_relax_buffer_texture_copy_pitch_and_offset_alignment: 
    (https://crbug.com/381000081):
    Don't require the alignments of D3D12_TEXTURE_DATA_PITCH_ALIGNMENT (256)
    for row pitch and D3D12_TEXTURE_DATA_PLACEMENT_ALIGNMENT (512) for offset
    in buffer-texture copies.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<CPU>  Vulkan backend - SwiftShader Device (Subzero)
----------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/40057808: CPU adapters not fully tested or conformant. |

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   timestamp-query
*   texture-compression-bc
*   texture-compression-bc-sliced-3d
*   texture-compression-etc2
*   texture-compression-astc
*   texture-compression-astc-sliced-3d
*   indirect-first-instance
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   subgroups
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   transient-attachments
*   unorm16texture-formats
*   adapter-properties-memory-heaps
*   adapter-properties-vk
*   dawn-format-capabilities
*   dawn-load-resolve-texture
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   use_temporary_buffer_in_texture_to_texture_copy: 
    (https://crbug.com/dawn/42):
    Split texture-to-texture copy into two copies: copy from source texture
    into a temporary buffer, and copy from the temporary buffer into the
    destination texture when copying between compressed textures that don't
    have block-aligned sizes. This workaround is enabled by default on all
    Vulkan drivers to solve an issue in the Vulkan SPEC about the
    texture-to-texture copies with compressed formats. See #1005
    (https://github.com/KhronosGroup/Vulkan-Docs/issues/1005) for more
    details.

*   vulkan_use_d32s8: 
    (https://crbug.com/dawn/286):
    Vulkan mandates support of either D32_FLOAT_S8 or D24_UNORM_S8. When
    available the backend will use D32S8 (toggle to on) but setting the toggle
    to off will make it use the D24S8 format when possible.

*   vulkan_use_s8: 
    (https://crbug.com/dawn/666):
    Vulkan has a pure stencil8 format but it is not universally available.
    When this toggle is on, the backend will use S8 for the stencil8 format,
    otherwise it will fallback to D32S8 or D24S8.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   vulkan_use_demote_to_helper_invocation_extension: 
    (https://crbug.com/42250787):
    Sets the use of the vulkan demote to helper extension

*   use_placeholder_fragment_in_vertex_only_pipeline: 
    (https://crbug.com/dawn/136):
    Use a placeholder empty fragment shader in vertex only render pipeline.
    This toggle must be enabled for OpenGL ES backend, the Vulkan Backend, and
    serves as a workaround by default enabled on some Metal devices with Intel
    GPU to ensure the depth result is correct.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   use_vulkan_zero_initialize_workgroup_memory_extension: 
    (https://crbug.com/dawn/1302):
    Initialize workgroup memory with OpConstantNull on Vulkan when the Vulkan
    extension VK_KHR_zero_initialize_workgroup_memory is supported.

*   vulkan_direct_variable_access_transform_handle: 
    (https://crbug.com/387000529):
    Transform handles using direct variable access.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

<CPU>  D3D11 backend - Microsoft Basic Render Driver
----------------------------------------------------

[WebGPU Status]
---------------
*   Blocklisted - crbug.com/41479539: D3D11 backend not fully implemented. | crbug.com/40057808: CPU adapters not fully tested or conformant. |

[Adapter Supported Features]
----------------------------
*   depth-clip-control
*   depth32float-stencil8
*   texture-compression-bc
*   texture-compression-bc-sliced-3d
*   rg11b10ufloat-renderable
*   bgra8unorm-storage
*   float32filterable
*   float32blendable
*   clip-distances
*   dual-source-blending
*   core-features-and-limits
*   dawn-internal-usages
*   dawn-multi-planar-formats
*   dawn-native
*   implicit-device-synchronization
*   d3d11multithread-protected
*   unorm16texture-formats
*   snorm16texture-formats
*   multi-planar-format-p010
*   multi-planar-render-targets
*   adapter-properties-memory-heaps
*   adapter-properties-d3d
*   dawn-format-capabilities
*   norm16texture-formats
*   shared-texture-memory-dxgi-shared-handle
*   shared-texture-memory-d3d11texture-2d
*   shared-fence-dxgi-shared-handle
*   shader-module-compilation-options
*   dawn-load-resolve-texture
*   dawn-partial-load-resolve-texture
*   dawn-texel-copy-buffer-row-alignment
*   flexible-texture-views

[Enabled Toggle Names]
----------------------
*   lazy_clear_resource_on_first_use: 
    (https://crbug.com/dawn/145):
    Clears resource to zero on first usage. This initializes the resource so
    that no dirty bits from recycled memory is present in the new resource.

*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

*   apply_clear_big_integer_color_value_with_draw: 
    (https://crbug.com/dawn/537):
    Apply the clear value of the color attachment with a draw call when load
    op is 'clear'. This toggle is enabled by default on D3D12 backends when we
    set large integer values (> 2^24 or < -2^24 for signed integer formats) as
    the clear value of a color attachment with 32-bit integer or unsigned
    integer formats because D3D12 APIs only support using float numbers as
    clear values, while a float number cannot always precisely represent an
    integer that is greater than 2^24 or smaller than -2^24). This toggle is
    also enabled on Intel GPUs on Metal backend due to a driver issue on Intel
    Metal driver.

*   use_blit_for_buffer_to_stencil_texture_copy: 
    (https://crbug.com/dawn/1389):
    Use a blit instead of a copy command to copy buffer data to the stencil
    aspect of a texture. Works around an issue where stencil writes by copy
    commands are not visible to a render or compute pass.

*   use_blit_for_t2b: 
    (https://crbug.com/dawn/348654098):
    Use a compute based blit instead of a copy command to copy texture with
    supported format to a buffer.

*   use_blit_for_b2t: 
    (https://crbug.com/dawn/348653642):
    Use a shader based blit instead of a copy command to copy a buffer to a
    texture with supported format.

*   enable_integer_range_analysis_in_robustness: 
    (https://crbug.com/348701956):
    Compute the range of the index with Integer Range Analysis in the
    robustness transform and skip doing index clamping when the out of bound
    access cannot happen.

[WebGPU Required Toggles - enabled]
-----------------------------------
*   disallow_spirv: 
    (https://crbug.com/1214923):
    Disallow usage of SPIR-V completely so that only WGSL is used for shader
    modules. This is useful to prevent a Chromium renderer process from
    successfully sending SPIR-V code to be compiled in the GPU process.

*   timestamp_quantization: 
    (https://crbug.com/dawn/1800):
    Enable timestamp queries quantization to reduce the precision of timers
    that can be created with timestamp queries.

Compositor Information
======================
Tile Update Mode: One-copy
Partial Raster  : Enabled

GpuMemoryBuffers Status
=======================
R_8               : Software only
R_16              : Software only
RG_88             : Software only
RG_1616           : Software only
BGR_565           : Software only
RGBA_4444         : Software only
RGBX_8888         : GPU_READ, SCANOUT
RGBA_8888         : GPU_READ, SCANOUT
BGRX_8888         : GPU_READ, SCANOUT
BGRA_1010102      : Software only
RGBA_1010102      : Software only
BGRA_8888         : GPU_READ, SCANOUT
RGBA_F16          : Software only
YVU_420           : Software only
YUV_420_BIPLANAR  : Software only
YUVA_420_TRIPLANAR: Software only
P010              : Software only

Display(s) Information
======================
Info                          : Display[3788937804] bounds=[0,0 1536x864], workarea=[0,0 1536x816], scale=1.25, rotation=0, panel_rotation=0 internal detected
Color space (all)             : {primaries:BT709, transfer:SRGB, matrix:RGB, range:FULL}
Buffer format (all)           : BGRA_8888
Color volume                  : {name:'srgb', r:[0.6400, 0.3300], g:[0.3000, 0.6000], b:[0.1500, 0.0600], w:[0.3127, 0.3290]}
SDR white level in nits       : 203
HDR relative maximum luminance: 1
Bits per color component      : 8
Bits per pixel                : 24
Refresh Rate in Hz            : 60

Video Acceleration Information
==============================
Decoding                      : 
Decode h264 baseline          : 64x64 to 4096x2304 pixels
Decode h264 baseline          : 64x64 to 2304x4096 pixels
Decode h264 main              : 64x64 to 4096x2304 pixels
Decode h264 main              : 64x64 to 2304x4096 pixels
Decode h264 high              : 64x64 to 4096x2304 pixels
Decode h264 high              : 64x64 to 2304x4096 pixels
Decode vp9 profile0           : 64x64 to 8192x4352 pixels
Decode vp9 profile2           : 64x64 to 8192x4352 pixels
Decode hevc main              : 64x64 to 8192x4352 pixels
Decode hevc main 10           : 64x64 to 8192x4352 pixels
Decode hevc main still-picture: 64x64 to 8192x4352 pixels
Encoding                      : 
Encode h264 baseline          : 128x128 to 1920x1080 pixels, and/or 172.000 fps.
Encode h264 baseline          : 128x128 to 1080x1920 pixels, and/or 172.000 fps.
Encode h264 main              : 128x128 to 1920x1080 pixels, and/or 172.000 fps.
Encode h264 main              : 128x128 to 1080x1920 pixels, and/or 172.000 fps.
Encode h264 high              : 128x128 to 1920x1080 pixels, and/or 172.000 fps.
Encode h264 high              : 128x128 to 1080x1920 pixels, and/or 172.000 fps.
Encode h264 baseline          : 128x128 to 3840x2160 pixels, and/or 60.000 fps.
Encode h264 baseline          : 128x128 to 2160x3840 pixels, and/or 60.000 fps.
Encode h264 main              : 128x128 to 3840x2160 pixels, and/or 60.000 fps.
Encode h264 main              : 128x128 to 2160x3840 pixels, and/or 60.000 fps.
Encode h264 high              : 128x128 to 3840x2160 pixels, and/or 60.000 fps.
Encode h264 high              : 128x128 to 2160x3840 pixels, and/or 60.000 fps.
Encode hevc main              : 130x128 to 1920x1080 pixels, and/or 128.000 fps.
Encode hevc main              : 130x128 to 1080x1920 pixels, and/or 128.000 fps.
Encode hevc main              : 130x128 to 3840x2160 pixels, and/or 32.000 fps.
Encode hevc main              : 130x128 to 2160x3840 pixels, and/or 32.000 fps.

Vulkan Information
==================

Device Performance Information
==============================
Total Physical Memory (Gb): 15
Total Disk Space (Gb)     : 475
Hardware Concurrency      : 16
System Commit Limit (Gb)  : 17
D3D11 Feature Level       : 12_1
Has Discrete GPU          : no
Software Rendering        : No

Log Messages
============
[2604:3872:0827/163226.203:ERROR:ui\gl\direct_composition_support.cc:615] : AMD VideoProcessorGetOutputExtension failed: Unspecified error (0x80004005)
[2604:3872:0827/163226.205:VERBOSE1:components\viz\service\main\viz_main_impl.cc:86] : VizNullHypothesis is disabled (not a warning)
GpuProcessHost: The info collection GPU process exited normally. Everything is okay.